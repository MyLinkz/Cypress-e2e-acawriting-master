const ExcelJS = require('exceljs');
const path = require('path');

function getFilePath(filename) {
    return path.resolve('cypress', 'fixtures', filename);
}

async function readCell(filename, sheetIndex, rowIndex, colIndex) {
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(getFilePath(filename));
    const worksheet = workbook.getWorksheet(sheetIndex);
    return worksheet.getRow(rowIndex).getCell(colIndex).value;
}

async function readRow(filename, sheetIndex, rowIndex) {
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(getFilePath(filename));
    const worksheet = workbook.getWorksheet(sheetIndex);
    return worksheet.getRow(rowIndex).values; // Tr·∫£ v·ªÅ array
}

async function readColumn(filename, sheetIndex, colIndex) {
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(getFilePath(filename));
    const worksheet = workbook.getWorksheet(sheetIndex);

    const columnData = [];
    worksheet.eachRow((row, rowIndex) => {
        columnData.push(row.getCell(colIndex).value);
    });

    return columnData; // Tr·∫£ v·ªÅ array
}

// Ghi 1 √¥ (cell)
async function writeCell(filename, sheetName, rowIndex, colIndex, value) {
    const workbook = new ExcelJS.Workbook();
    const filePath = getFilePath(filename);

    try {
        await workbook.xlsx.readFile(filePath);
    } catch (err) {
        console.log(`File ${filename} kh√¥ng t·ªìn t·∫°i. S·∫Ω t·∫°o m·ªõi.`);
    }

    let worksheet = workbook.getWorksheet(sheetName);
    if (!worksheet) {
        worksheet = workbook.addWorksheet(sheetName);
    }

    const row = worksheet.getRow(rowIndex);
    row.getCell(colIndex).value = value;

    await workbook.xlsx.writeFile(filePath);
}

// Ghi nguy√™n 1 d√≤ng (row)
async function writeRow(filename, sheetName, rowIndex, dataArray) {
    const workbook = new ExcelJS.Workbook();
    const filePath = getFilePath(filename);

    try {
        await workbook.xlsx.readFile(filePath);
    } catch (err) {
        console.log(`File ${filename} kh√¥ng t·ªìn t·∫°i. S·∫Ω t·∫°o m·ªõi.`);
    }

    let worksheet = workbook.getWorksheet(sheetName);
    if (!worksheet) {
        worksheet = workbook.addWorksheet(sheetName);
    }

    const row = worksheet.getRow(rowIndex);
    row.values = dataArray;

    await workbook.xlsx.writeFile(filePath);
}

// Ghi nguy√™n 1 c·ªôt (column)
async function writeColumn(filename, sheetName, colIndex, dataArray) {
    const workbook = new ExcelJS.Workbook();
    const filePath = getFilePath(filename);

    try {
        await workbook.xlsx.readFile(filePath);
    } catch (err) {
        console.log(`File ${filename} kh√¥ng t·ªìn t·∫°i. S·∫Ω t·∫°o m·ªõi.`);
    }

    let worksheet = workbook.getWorksheet(sheetName);
    if (!worksheet) {
        worksheet = workbook.addWorksheet(sheetName);
    }

    dataArray.forEach((value, index) => {
        worksheet.getRow(index + 1).getCell(colIndex).value = value;
    });

    await workbook.xlsx.writeFile(filePath);
}

async function readSheet(filename, sheetName) {
	const workbook = new ExcelJS.Workbook();
	const filePath = getFilePath(filename);

	await workbook.xlsx.readFile(filePath);

	const worksheet = workbook.getWorksheet(sheetName);
	if (!worksheet) {
		throw new Error(`Sheet "${sheetName}" kh√¥ng t·ªìn t·∫°i trong file ${filename}`);
	}

	const sheetData = [];
	worksheet.eachRow((row) => {
		const rowData = [];
		row.eachCell({ includeEmpty: true }, (cell) => {  // üëà Th√™m `{ includeEmpty: true }`
			rowData.push(cell.value !== undefined ? cell.value : "");  // üëà Thay th·∫ø `undefined` b·∫±ng chu·ªói r·ªóng
		});
		sheetData.push(rowData);
	});

	return sheetData;  // Tr·∫£ v·ªÅ m·∫£ng 2 chi·ªÅu [row][cell]
}

async function loadExcelData(filename, sheetName) {
	return cy.task('readSheet', { filename, sheetName }).then((data) => {
		if (!Array.isArray(data) || data.length === 0) {
			throw new Error(`Sheet ${sheetName} kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng`);
		}

		const header = data[0];  // L·∫•y header t·ª´ d√≤ng ƒë·∫ßu ti√™n
		if (!Array.isArray(header)) {
			throw new Error(`D·ªØ li·ªáu header kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng`);
		}

		// Chuy·ªÉn ƒë·ªïi t·ª´ng d√≤ng d·ªØ li·ªáu th√†nh object d·ª±a tr√™n header
		return data.slice(1).map(row => {
			const mappedRow = {};
			header.forEach((colName, index) => {
				mappedRow[colName] = row[index] ?? null;
			});
			return mappedRow;
		});
	});
}



// Xu·∫•t t·∫•t c·∫£ h√†m
module.exports = {
    readCell,
    readRow,
    readColumn,
    writeCell,
    writeRow,
    writeColumn,
    readSheet,
	loadExcelData
};
