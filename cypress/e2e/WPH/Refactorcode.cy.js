import { faker } from "@faker-js/faker";
import {
    ROUTERS, TCForInvaildPassword, TCForVaildPassword, TCForInvalidEmail,
    ValidEmail, ValidFullName, OverLength255, CopyText, ErrorMessages,
    PasswordLV0, PasswordLV1, PasswordLV2, PasswordLV3, PasswordLV4
} from "../support/constants";
//https://docs.google.com/spreadsheets/d/19Knmyxh26B4wYwJcTvxwRQkVIHzEilkQdaaHmwQ-76Q/edit#gid=556681741
const EmailTextBox = '[placeholder="Email"]'
const PasswordTextBox = '[placeholder="Password"]'
const FullNameTextBox = '[placeholder="Full Name"]'
const ButtonSubmit = '.button'
const TextError = '[class="text-error"]'
const CheckBox = '[class="label-checkbox"]'
const NumberBalance = '.sc-4db11891-2 > span'
const PasswordStreng = '.pass-progress__item'
const HyperLink = {
    SignIn: '.signup__link',
    SignUp: 'abcd'
}
describe('Signup', () => {
    beforeEach(() => {
        cy.visit(ROUTERS.SIGN_UP)
    })
    context("Navigate", function () {
        it("From /signin", function () {
            cy.visit(ROUTERS.SIGN_IN)
            cy.contains("Sign Up")
                .click()
                .get("h1")
                .contains("SIGN UP")
        })
        it("By URL", function () {
            cy.get("h1")
                .contains("SIGN UP")
        })
    })
    context("[Email] textbox", () => {
        it('Copy & Paste', () => {
            cy.document().then((doc) => cy.spy(doc, 'execCommand').as('execCommand'))
            cy.get(EmailTextBox)
                .type(CopyText)
            cy.get(EmailTextBox)
                .invoke('val')
                .then(($temp) => {
                    const txt = $temp
                    cy.get(EmailTextBox)
                        .focus()
                    cy.document().invoke('execCommand', 'copy')
                    cy.get(EmailTextBox)
                        .clear()
                    cy.get(EmailTextBox)
                        .type(`${txt}`)
                    cy.get(EmailTextBox)
                        .invoke('val')
                        .should("contain", CopyText)
                })
        })
        context("Invaild Email:", function () {
            it("Leaving the field empty", () => {
                cy.get(FullNameTextBox)
                    .type(CopyText)
                cy.get(PasswordTextBox)
                    .type("123123")
                cy.get(ButtonSubmit)
                    .click({ force: true })
                cy.wait(4000)
                cy.get(TextError)
                    .should("contain", ErrorMessages.EmailRequired)
            })
            TCForInvalidEmail.forEach((value) => {
                it(`${value.description}`, () => {
                    cy.get(EmailTextBox)
                        .type(`${value.email}`)
                    cy.get(PasswordTextBox)
                        .type("123123")
                    cy.get(ButtonSubmit)
                        .click({ force: true })
                    cy.wait(4000)
                    cy.get(TextError)
                        .eq(0)
                        .should("contain", ErrorMessages.InvalidEmail)
                })
            })
        })
        context("Valid email", function () {
            ValidEmail.forEach((value) => {
                it(`Input email:` + ` ${value}`, () => {
                    cy.get(EmailTextBox)
                        .type(`${value}`)
                    cy.get(PasswordTextBox)
                        .type("123123")
                    cy.get(CheckBox)
                        .click({ force: true })
                    cy.get(ButtonSubmit)
                        .click()
                    cy.wait(4000)
                    cy.get(NumberBalance)
                        .should("not.contain.text", "NaN")
                })
            })
        })
    })
    context("[Full Name] Validation", () => {
        it('Copy & Paste', () => {
            cy.document().then((doc) => cy.spy(doc, 'execCommand').as('execCommand'))
            cy.get(FullNameTextBox)
                .type(CopyText)
            cy.get(FullNameTextBox).invoke('val').then(($temp) => {
                const txt = $temp
                cy.get(FullNameTextBox)
                    .focus()
                cy.document().invoke('execCommand', 'copy')
                cy.get(FullNameTextBox)
                    .clear()
                cy.get(FullNameTextBox)
                    .type(`${txt}`)
                cy.get(FullNameTextBox)
                    .invoke('val')
                    .should("contain", CopyText)
            })
        })
        it("Leave the Full Name field empty", () => {
            cy.get(EmailTextBox)
                .type(faker.internet.email())
            cy.get(PasswordTextBox)
                .type('123123')
            cy.get(CheckBox)
                .click({ force: true })
            cy.get(ButtonSubmit)
                .click({ force: true })
            cy.wait(4000)
            cy.get(NumberBalance)
                .should("not.contain.text", "NaN")
        })
        ValidFullName.forEach((value) => {
            it(`Input valid value: ${value.description}`, () => {
                cy.get(EmailTextBox)
                    .type(faker.internet.email())
                cy.get(FullNameTextBox)
                    .type(value.fullName)
                cy.get(PasswordTextBox)
                    .type("123123")
                cy.get(CheckBox)
                    .click({ force: true })
                cy.get(ButtonSubmit)
                    .click({ force: true })
                cy.wait(4000)
                cy.get(NumberBalance)
                    .should("not.contain.text", "NaN")
            })
        })
        it("Input > 255 characters", () => {
            cy.get(EmailTextBox)
                .type(faker.internet.email())
            cy.get(FullNameTextBox)
                .type(`${OverLength255}`)
            cy.get(PasswordTextBox)
                .type('123123')
            cy.get(CheckBox)
                .click({ force: true })
            cy.get(ButtonSubmit)
                .click({ force: true })
            cy.wait(4000)
            cy.get(TextError)
                .should("contain", ErrorMessages.OverLength255)
        })
    })
    context("Password Field", () => {
        it('Copy & Paste', () => {
            cy.document().then((doc) => cy.spy(doc, 'execCommand').as('execCommand'))
            cy.get(PasswordTextBox)
                .type(CopyText)
            cy.get(PasswordTextBox)
                .invoke('val')
                .then(($temp) => {
                    // const txt = $temp
                    const txt = $temp
                    cy.get(PasswordTextBox)
                        .focus()
                    cy.document()
                        .invoke('execCommand', 'copy')
                    cy.get(PasswordTextBox)
                        .clear()
                    cy.get(PasswordTextBox)
                        .type(`${txt}`)
                    cy.get(PasswordTextBox)
                        .invoke('val')
                        .should("contain", CopyText)
                })
        })
        it("Password convert to '*'", () => {
            cy.get(PasswordTextBox)
                .type(CopyText)
            cy.get(PasswordTextBox)
                .should('have.attr', 'type', 'password')
        })
        context("Invailid Password", () => {
            TCForInvaildPassword.forEach((value) => {
                it(`${value.description}`, () => {
                    cy.get(EmailTextBox)
                        .type(faker.internet.email())
                    cy.get(PasswordTextBox)
                        .type(value.password)
                    cy.get(ButtonSubmit)
                        .click({ force: true })
                    cy.wait(4000)
                    cy.get(TextError)
                        .should("contain", `${ErrorMessages.PasswordLeast6}`)
                })
            })
        })
        context("Vailid Password", () => {
            it("Leave the Full Name field empty", () => {
                cy.get(EmailTextBox)
                    .type(faker.internet.email())
                cy.get(FullNameTextBox)
                    .type('123123')
                cy.get(CheckBox)
                    .click({ force: true })
                cy.get(ButtonSubmit)
                    .click({ force: true })
                cy.wait(4000)
                cy.get(TextError)
                    .should("contain", ErrorMessages.PassRequired)
            })
            TCForVaildPassword.forEach((value) => {
                it(`${value.description}`, () => {
                    cy.get(EmailTextBox).type(faker.internet.email())
                    cy.get(PasswordTextBox).type(value.password)
                    cy.get(ButtonSubmit)
                        .click({ force: true })
                    cy.get(CheckBox)
                        .click({ force: true })
                    cy.wait(4000)
                    cy.get(NumberBalance)
                        .should("not.contain.text", "NaN")
                })
            })
        })
        context("Password strength meters", () => {
            PasswordLV0.forEach((value) => {
                it('Level 0:' + `${value.description}`, () => {
                    cy.get(PasswordTextBox)
                        .click()
                        .type(value.password)
                    cy.get(PasswordStreng).eq(0)
                        .should('not.have.class', 'active')
                    cy.get(PasswordStreng).eq(1)
                        .should('not.have.class', 'active')
                    cy.get(PasswordStreng).eq(2)
                        .should('not.have.class', 'active')
                    cy.get(PasswordStreng).eq(3)
                        .should('not.have.class', 'active')
                })
            })
            PasswordLV1.forEach((value) => {
                it('Level 1:' + `${value.description}`, () => {
                    cy.get(PasswordTextBox)
                        .click()
                        .type(value.password)
                    cy.get(PasswordStreng).eq(0)
                        .should('have.class', 'active')
                    cy.get(PasswordStreng).eq(1)
                        .should('not.have.class', 'active')
                    cy.get(PasswordStreng).eq(2)
                        .should('not.have.class', 'active')
                    cy.get(PasswordStreng).eq(3)
                        .should('not.have.class', 'active')
                })
            })
            PasswordLV2.forEach((value) => {
                it('Level 2:' + `${value.description}`, () => {
                    cy.get(PasswordTextBox)
                        .click()
                        .type(value.password)
                    cy.get(PasswordStreng).eq(0)
                        .should('have.class', 'active')
                    cy.get(PasswordStreng).eq(1)
                        .should('have.class', 'active')
                    cy.get(PasswordStreng).eq(2)
                        .should('not.have.class', 'active')
                    cy.get(PasswordStreng).eq(3)
                        .should('not.have.class', 'active')
                })
            })
            PasswordLV3.forEach((value) => {
                it('Level 3:' + `${value.description}`, () => {
                    cy.get(PasswordTextBox)
                        .click()
                        .type(value.password)
                    cy.get(PasswordStreng).eq(0)
                        .should('have.class', 'active')
                    cy.get(PasswordStreng).eq(1)
                        .should('have.class', 'active')
                    cy.get(PasswordStreng).eq(2)
                        .should('have.class', 'active')
                    cy.get(PasswordStreng).eq(3)
                        .should('not.have.class', 'active')
                })
            })
            PasswordLV4.forEach((value) => {
                it('Level 4:' + `${value.description}`, () => {
                    cy.get(PasswordTextBox)
                        .click()
                        .type(value.password)
                    cy.get(PasswordStreng).eq(0)
                        .should('have.class', 'active')
                    cy.get(PasswordStreng).eq(1)
                        .should('have.class', 'active')
                    cy.get(PasswordStreng).eq(2)
                        .should('have.class', 'active')
                    cy.get(PasswordStreng).eq(3)
                        .should('have.class', 'active')
                })
            })
        })
    })
    context("Check box", () => {
        it("Uncheck", () => {
            cy.get(EmailTextBox)
                .type(faker.internet.email())
            cy.get(PasswordTextBox)
                .type('123123')
            cy.get(CheckBox)
            cy.get(ButtonSubmit)
                .click({ force: true })
            cy.wait(4000)
            cy.get(NumberBalance)
                .should("not.contain.text", "NaN")
        })
        it("Checked", () => {
            cy.get(EmailTextBox)
                .type(faker.internet.email())
            cy.get(PasswordTextBox)
                .type('123123')
            cy.get(CheckBox)
                .click({ force: true })
            cy.get(ButtonSubmit)
                .click({ force: true })
            cy.wait(4000)
            cy.get(NumberBalance)
                .should("not.contain.text", "NaN")
        })
    })
    context("Button Create account:", () => {
        it.only("SHOULD validate and show the error messages again after the user clicked Create Account", () => {
            cy.get(EmailTextBox)
                .type('a')
            cy.get(PasswordTextBox)
                .type('a')
            cy.get(ButtonSubmit)
                .click({ force: true })
            cy.get(TextError)
                .eq(0)
                .should("contain", ErrorMessages.InvalidEmail)
            cy.get(TextError)
                .eq(1)
                .should("contain", ErrorMessages.PasswordLeast6)
            cy.get(EmailTextBox)
                .clear()
                .type('b')
            cy.get(PasswordTextBox)
                .clear()
                .type('b')
            cy.get(ButtonSubmit)
                .click({ force: true })
            cy.get(TextError)
                .eq(0)
                .should("contain", ErrorMessages.InvalidEmail)
            cy.get(TextError)
                .eq(1)
                .should("contain", ErrorMessages.PasswordLeast6)
        })
    })
    context("Sign-in button", () => {
        it("Navigate to the sign-in page correctly", () => {
            cy.get(HyperLink.SignIn)
                .click({ force: true })
            cy.location("pathname")
                .should("eq", ROUTERS.SIGN_IN)
        })
    })
})
